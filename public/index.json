[{"content":"為什麼使用慣例式提交？ 慣例式提交（Conventional Commits）是一種對提交說明的簡單規範，優勢如下。\n自動產生修改日誌 (Changelog)。 基於提交的類型，自動決定語意化版本的升級。 向同事、公眾以及其他的利益相關者傳達變化的過程。 觸發建置與發布流程。 讓大家探索更有結構的提交歷史，使你的專案更容易被貢獻。 結構說明 提交說明的結構如下：\n\u0026lt;類型 type\u0026gt;[可選的作用範圍 scope]: \u0026lt;描述 description\u0026gt; [可選的正文 body] [可選的頁腳 footer] 範例如下\nfeat: 支援新的配置文件擴展功能 BREAKING CHANGE: 現在 `extends` 鍵可用於擴展其他配置文件 fix: 修正請求的競爭問題 增加請求 ID 並追蹤最後一次請求。忽略來自舊請求的回應。 規範要點 類型（如fix、 feat）必須在最前面。 提交描述應簡明扼要，描述程式碼變更的內容。 可以選擇提供詳細正文以補充提交的變更細節。 若有重大變更，必須使用 BREAKING CHANGE: 說明具體變更。 常見類型 有助於清晰傳達提交的內容，常見的類型有：\nfix: 表示對程式修正了一個bug（語意化版本中的 修訂號 PATCH）。 feat: 表示對程式增加了一個功能（語意化版本中的 次版本 MINOR）。 BREAKING CHANGE: 重大變更，（語意化版本中的 主版本 MAJOR）。 其他常見的類型\nchore: 進行一些任務管理或環境變更，不涉及程式邏輯。 docs: 文件相關的變更。 style: 程式碼風格或格式上的調整。 refactor: 程式碼重構，不改變外部行為。 perf: 提升效能的修改。 test: 測試相關的修改。 進階使用\n增加作用範圍：可以用括號為類型加上範圍，例如 fix(parser): 修正解析器錯誤。 重大變更：提交中可使用 ! 來表明重大變更，如 feat(api)!: 移除不再使用的 API。 常見問題 提交說明應該大寫還是小寫？ 大寫或小寫皆可，但建議一致。 如何處理包含多種類型的提交？ 最好將其拆分為多個提交，讓每個提交專注於一個變更。 這與 SemVer 有什麼關係呢？ fix 類型的提交應該對應到 PATCH 發行版。feat 類型的提交應該對應到 MINOR 發行版。 含有 BREAKING CHANGE 的提交，無論是什麼類型，都應該要對應到 MAJOR 發行版。 提交類型使用錯誤時該如何處理？ 可以使用 git rebase -i 來編輯提交歷史，在發布之前進行修正。 慣例式提交要如何處理回退提交 (revert commit)？ 慣例式提交沒有強制定義回退的行為。反而，我們將這個問題留給工具的作者，靈活運用 類型 以及 頁腳 來開發處理回退的邏輯。 其中一個推薦的方法時使用 revert 類型，並在頁腳中參照到被回退的 SHA 雜湊： revert: let us never again speak of the noodle incident Refs: 676104e, a215868 ","permalink":"https://eujenz.github.io/posts/conventionalcommits/","summary":"\u003ch2 id=\"為什麼使用慣例式提交\"\u003e為什麼使用慣例式提交？\u003c/h2\u003e\n\u003cp\u003e慣例式提交（Conventional Commits）是一種對提交說明的簡單規範，優勢如下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自動產生修改日誌 (Changelog)。\u003c/li\u003e\n\u003cli\u003e基於提交的類型，自動決定語意化版本的升級。\u003c/li\u003e\n\u003cli\u003e向同事、公眾以及其他的利益相關者傳達變化的過程。\u003c/li\u003e\n\u003cli\u003e觸發建置與發布流程。\u003c/li\u003e\n\u003cli\u003e讓大家探索更有結構的提交歷史，使你的專案更容易被貢獻。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"結構說明\"\u003e結構說明\u003c/h3\u003e\n\u003cp\u003e提交說明的結構如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;類型 type\u0026gt;[可選的作用範圍 scope]: \u0026lt;描述 description\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[可選的正文 body]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[可選的頁腳 footer]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e範例如下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efeat: 支援新的配置文件擴展功能\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBREAKING CHANGE: 現在 `extends` 鍵可用於擴展其他配置文件\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efix: 修正請求的競爭問題\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e增加請求 ID 並追蹤最後一次請求。忽略來自舊請求的回應。\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"規範要點\"\u003e規範要點\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e類型（如\u003ccode\u003efix\u003c/code\u003e、 \u003ccode\u003efeat\u003c/code\u003e）必須在最前面。\u003c/li\u003e\n\u003cli\u003e提交描述應簡明扼要，描述程式碼變更的內容。\u003c/li\u003e\n\u003cli\u003e可以選擇提供詳細正文以補充提交的變更細節。\n\u003cul\u003e\n\u003cli\u003e若有重大變更，必須使用 \u003ccode\u003eBREAKING CHANGE:\u003c/code\u003e 說明具體變更。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"常見類型\"\u003e常見類型\u003c/h3\u003e\n\u003cp\u003e有助於清晰傳達提交的內容，常見的類型有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efix\u003c/code\u003e: 表示對程式修正了一個bug（語意化版本中的 修訂號 PATCH）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efeat\u003c/code\u003e: 表示對程式增加了一個功能（語意化版本中的 次版本 MINOR）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBREAKING CHANGE\u003c/code\u003e: 重大變更，（語意化版本中的 主版本 MAJOR）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其他常見的類型\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echore\u003c/code\u003e: 進行一些任務管理或環境變更，不涉及程式邏輯。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocs\u003c/code\u003e: 文件相關的變更。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle\u003c/code\u003e: 程式碼風格或格式上的調整。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erefactor\u003c/code\u003e: 程式碼重構，不改變外部行為。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eperf\u003c/code\u003e: 提升效能的修改。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etest\u003c/code\u003e: 測試相關的修改。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e進階使用\u003c/p\u003e","title":"ConventionalCommits初學指南"},{"content":"要系統性地理解 MOSFET 的概念，必須從基本結構、工作原理、類型與應用四個層面進行分析。這樣的學習架構能夠幫助你逐步掌握 MOSFET 的關鍵知識。以下是對 MOSFET 概念的系統化介紹：\n1. MOSFET 的基本結構 MOSFET 是一種場效電晶體，由四個主要部分組成：\n閘極（Gate）：控制電流的開關。閘極與半導體層之間有一層絕緣層（通常是二氧化矽），這層絕緣層使得電場可以控制電流，而不需直接的電流流過閘極。 汲極（Drain）：電流從此端流出。 源極（Source）：電流從此端流入。 基板（Body）：通常與源極連接。 2. MOSFET 的工作原理 MOSFET 是根據閘極電壓來控制源極與汲極之間的電流流動。主要有三個工作區域：\n截止區（Cutoff Region）： 當閘極電壓 $V_{GS}$ 低於某個臨界電壓 $V_{th}$ 時，MOSFET 處於關閉狀態，無電流通過源極和汲極。\n線性區（Linear Region）： 當閘極電壓高於臨界電壓，但汲極-源極電壓 $V_{DS}$ 相對較低時，MOSFET 處於線性區，電流與汲極電壓成正比，電晶體像是電阻，適合用作放大器。\n飽和區（Saturation Region）： 當 $V_{DS}$ 較大時，MOSFET 進入飽和區，電流達到最大值並保持穩定，適合用於開關操作。\n3. MOSFET 的類型 MOSFET 根據通道類型和控制方式可分為以下兩類：\nN 通道 MOSFET（NMOS）： 當閘極電壓高於源極電壓時，形成 N 型通道，電流從汲極流向源極。適用於正電壓驅動的情況。\nP 通道 MOSFET（PMOS）： 當閘極電壓低於源極電壓時，形成 P 型通道，電流從源極流向汲極。適用於負電壓或相對低電壓驅動。\n4. MOSFET 的應用 MOSFET 可以在各種應用中作為開關或放大器使用。以下是兩大主要應用：\n開關應用：MOSFET 常被用於數位電路中，開關切換迅速，特別適合邏輯電路（如 CMOS 技術）。在開關應用中，MOSFET 工作於截止區和飽和區之間。\n放大應用：當 MOSFET 工作在線性區時，可以用作信號放大器，常見於類比電路中。\n5. MOSFET 與 CMOS 的關係 CMOS 電路是由 NMOS 和 PMOS 互補組成的，兩者在工作時互相補充：當一個導通，另一個截止，從而實現邏輯反相功能。這樣的組合使 CMOS 具有低功耗的特點，廣泛應用於數位電路和處理器中。\n總結： 理解 MOSFET 的關鍵是掌握其基本結構、不同工作區域的運作方式，以及 NMOS 和 PMOS 的區別。在數位電路中，MOSFET 常與 CMOS 技術結合使用，以實現低功耗、高效能的開關與放大功能。\n","permalink":"https://eujenz.github.io/posts/mosfet/","summary":"\u003cp\u003e要系統性地理解 MOSFET 的概念，必須從基本結構、工作原理、類型與應用四個層面進行分析。這樣的學習架構能夠幫助你逐步掌握 MOSFET 的關鍵知識。以下是對 MOSFET 概念的系統化介紹：\u003c/p\u003e\n\u003ch3 id=\"1-mosfet-的基本結構\"\u003e1. MOSFET 的基本結構\u003c/h3\u003e\n\u003cp\u003eMOSFET 是一種場效電晶體，由四個主要部分組成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e閘極（Gate）\u003c/strong\u003e：控制電流的開關。閘極與半導體層之間有一層絕緣層（通常是二氧化矽），這層絕緣層使得電場可以控制電流，而不需直接的電流流過閘極。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e汲極（Drain）\u003c/strong\u003e：電流從此端流出。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e源極（Source）\u003c/strong\u003e：電流從此端流入。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e基板（Body）\u003c/strong\u003e：通常與源極連接。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-mosfet-的工作原理\"\u003e2. MOSFET 的工作原理\u003c/h3\u003e\n\u003cp\u003eMOSFET 是根據閘極電壓來控制源極與汲極之間的電流流動。主要有三個工作區域：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e截止區（Cutoff Region）\u003c/strong\u003e：\n當閘極電壓 $V_{GS}$ 低於某個臨界電壓 $V_{th}$ 時，MOSFET 處於關閉狀態，無電流通過源極和汲極。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e線性區（Linear Region）\u003c/strong\u003e：\n當閘極電壓高於臨界電壓，但汲極-源極電壓 $V_{DS}$ 相對較低時，MOSFET 處於線性區，電流與汲極電壓成正比，電晶體像是電阻，適合用作放大器。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e飽和區（Saturation Region）\u003c/strong\u003e：\n當 $V_{DS}$ 較大時，MOSFET 進入飽和區，電流達到最大值並保持穩定，適合用於開關操作。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-mosfet-的類型\"\u003e3. MOSFET 的類型\u003c/h3\u003e\n\u003cp\u003eMOSFET 根據通道類型和控制方式可分為以下兩類：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eN 通道 MOSFET（NMOS）\u003c/strong\u003e：\n當閘極電壓高於源極電壓時，形成 N 型通道，電流從汲極流向源極。適用於正電壓驅動的情況。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eP 通道 MOSFET（PMOS）\u003c/strong\u003e：\n當閘極電壓低於源極電壓時，形成 P 型通道，電流從源極流向汲極。適用於負電壓或相對低電壓驅動。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-mosfet-的應用\"\u003e4. MOSFET 的應用\u003c/h3\u003e\n\u003cp\u003eMOSFET 可以在各種應用中作為開關或放大器使用。以下是兩大主要應用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e開關應用\u003c/strong\u003e：MOSFET 常被用於數位電路中，開關切換迅速，特別適合邏輯電路（如 CMOS 技術）。在開關應用中，MOSFET 工作於截止區和飽和區之間。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e放大應用\u003c/strong\u003e：當 MOSFET 工作在線性區時，可以用作信號放大器，常見於類比電路中。\u003c/p\u003e","title":"MOSFET"},{"content":"","permalink":"https://eujenz.github.io/about/","summary":"","title":"About"}]