<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git on LEE CHIEN-WEI</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on LEE CHIEN-WEI</description>
    <generator>Hugo -- 0.134.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Sep 2024 07:48:52 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ConventionalCommits</title>
      <link>http://localhost:1313/posts/conventionalcommits/</link>
      <pubDate>Mon, 16 Sep 2024 07:48:52 +0800</pubDate>
      <guid>http://localhost:1313/posts/conventionalcommits/</guid>
      <description>&lt;h1 id=&#34;慣例式提交規範-100-初學者指南&#34;&gt;慣例式提交規範 1.0.0 初學者指南&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;慣例式提交（Conventional Commits）是一種對提交說明的簡單規範，讓提交歷史更具結構性。這種規範使得自動化工具更容易運作，並且它能夠與語意化版本（SemVer）對應，用來描述功能、新增、修正或重大變更。&lt;/p&gt;
&lt;h2 id=&#34;基本結構&#34;&gt;基本結構&lt;/h2&gt;
&lt;p&gt;提交說明的結構如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;類型 type&amp;gt;[可選的作用範圍 scope]: &amp;lt;描述 description&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這些元素有助於清晰傳達提交的內容，常見的類型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fix&lt;/code&gt;: 修正錯誤（對應 PATCH）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feat&lt;/code&gt;: 新增功能（對應 MINOR）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BREAKING CHANGE&lt;/code&gt;: 重大變更（對應 MAJOR）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;提交類型範例&#34;&gt;提交類型範例&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;fix:&lt;/strong&gt; 修正程式中的錯誤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feat:&lt;/strong&gt; 新增功能，或對程式進行擴充。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; 重大變更，可能是任何類型的一部分。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;其他常見的類型&#34;&gt;其他常見的類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chore&lt;/code&gt;: 進行一些任務管理或環境變更，不涉及程式邏輯。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: 文件相關的變更。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;: 程式碼風格或格式上的調整。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;refactor&lt;/code&gt;: 程式碼重構，不改變外部行為。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt;: 提升效能的修改。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: 測試相關的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;進階使用&#34;&gt;進階使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;增加作用範圍&lt;/strong&gt;：可以用括號為類型加上範圍，例如 &lt;code&gt;fix(parser): 修正解析器錯誤&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重大變更&lt;/strong&gt;：提交中可使用 &lt;code&gt;!&lt;/code&gt; 來表明重大變更，如 &lt;code&gt;feat(api)!: 移除不再使用的 API&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;規範要點&#34;&gt;規範要點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;類型（如 feat, fix）必須在最前面。&lt;/li&gt;
&lt;li&gt;提交描述應簡明扼要，描述程式碼變更的內容。&lt;/li&gt;
&lt;li&gt;若有重大變更，必須使用 &lt;code&gt;BREAKING CHANGE:&lt;/code&gt; 說明具體變更。&lt;/li&gt;
&lt;li&gt;可以選擇提供詳細正文以補充提交的變更細節。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;為什麼使用慣例式提交&#34;&gt;為什麼使用慣例式提交？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自動生成修改日誌。&lt;/li&gt;
&lt;li&gt;根據提交類型自動決定版本升級。&lt;/li&gt;
&lt;li&gt;方便其他開發者理解變更。&lt;/li&gt;
&lt;li&gt;更有效率的協作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常見問題&#34;&gt;常見問題&lt;/h2&gt;
&lt;h3 id=&#34;提交說明應該大寫還是小寫&#34;&gt;提交說明應該大寫還是小寫？&lt;/h3&gt;
&lt;p&gt;大寫或小寫皆可，但建議一致。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
